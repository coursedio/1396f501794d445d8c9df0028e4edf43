WEBVTT

1
00:00:01.000 --> 00:00:03.004
- So what does it take to build an AI system?

2
00:00:03.004 --> 00:00:06.001
To think about this, let's go back to our challenge

3
00:00:06.001 --> 00:00:08.007
of finding dogs in images.

4
00:00:08.007 --> 00:00:11.000
The first step data scientists need to do,

5
00:00:11.000 --> 00:00:13.006
is figure out what they want from the data.

6
00:00:13.006 --> 00:00:16.000
In this case, they're not asking the AI system

7
00:00:16.000 --> 00:00:18.003
to cluster together its own groups.

8
00:00:18.003 --> 00:00:20.001
Instead, they're asking the system

9
00:00:20.001 --> 00:00:23.007
to classify data into two categories.

10
00:00:23.007 --> 00:00:26.002
One category will have images with dogs

11
00:00:26.002 --> 00:00:29.003
and the others will be not dogs.

12
00:00:29.003 --> 00:00:33.004
This is a classic binary classification challenge.

13
00:00:33.004 --> 00:00:35.005
Remember, that's when the neural network

14
00:00:35.005 --> 00:00:38.007
just has two possible classifications.

15
00:00:38.007 --> 00:00:41.006
This means they'll be doing supervised machine learning.

16
00:00:41.006 --> 00:00:43.005
Remember that supervised machine learning

17
00:00:43.005 --> 00:00:46.000
starts out with labeled data.

18
00:00:46.000 --> 00:00:47.002
Here, the system will be trained

19
00:00:47.002 --> 00:00:52.002
with hundreds of thousands of images known to contain dogs.

20
00:00:52.002 --> 00:00:54.003
The next step for data scientists

21
00:00:54.003 --> 00:00:55.008
is to figure out if they want to use

22
00:00:55.008 --> 00:00:58.004
standard machine learning algorithms,

23
00:00:58.004 --> 00:01:01.005
or if they'd like to use an artificial neural network.

24
00:01:01.005 --> 00:01:04.003
Remember that this is a classification problem,

25
00:01:04.003 --> 00:01:06.006
so if they go with machine learning algorithms,

26
00:01:06.006 --> 00:01:09.003
they'll probably either use K nearest neighbor

27
00:01:09.003 --> 00:01:11.004
or naive bayes.

28
00:01:11.004 --> 00:01:12.004
You've seen that the system

29
00:01:12.004 --> 00:01:15.003
will break down each image into pixels.

30
00:01:15.003 --> 00:01:17.007
That means that this is going to be a complex challenge

31
00:01:17.007 --> 00:01:19.001
with a lot of data,

32
00:01:19.001 --> 00:01:22.002
so they're going to use an artificial neural network.

33
00:01:22.002 --> 00:01:23.009
They'll create the input layer,

34
00:01:23.009 --> 00:01:26.005
hidden layers and output layer.

35
00:01:26.005 --> 00:01:27.004
Now, remember that since

36
00:01:27.004 --> 00:01:29.007
this is a binary classification challenge,

37
00:01:29.007 --> 00:01:34.002
there are only two options, dog or not dog,

38
00:01:34.002 --> 00:01:37.009
so they'll need just two nodes for the output layer.

39
00:01:37.009 --> 00:01:41.003
Next, the neural network will be initialized.

40
00:01:41.003 --> 00:01:43.004
The system will assign random numbers

41
00:01:43.004 --> 00:01:46.003
to all the weights of the connections.

42
00:01:46.003 --> 00:01:50.001
Then, the system will set the bias on all the nodes to zero.

43
00:01:50.001 --> 00:01:52.009
This is almost like shaking an etch a sketch

44
00:01:52.009 --> 00:01:55.006
to give itself a clean slate.

45
00:01:55.006 --> 00:01:57.003
Now, the training set needs to be fed

46
00:01:57.003 --> 00:01:59.000
into the neural network.

47
00:01:59.000 --> 00:02:02.003
The first few images will probably be not that much better

48
00:02:02.003 --> 00:02:03.009
than random guesses.

49
00:02:03.009 --> 00:02:06.001
The neural network will say something like,

50
00:02:06.001 --> 00:02:09.004
there's a 62% chance that the image contains a dog,

51
00:02:09.004 --> 00:02:12.007
or a 55% chance it's not.

52
00:02:12.007 --> 00:02:14.007
Then, the network will compare its answer

53
00:02:14.007 --> 00:02:16.008
to the label on the data.

54
00:02:16.008 --> 00:02:19.002
If it misidentifies the dog image,

55
00:02:19.002 --> 00:02:21.009
then it will look at the gradient descent

56
00:02:21.009 --> 00:02:26.008
to determine how much to change the weights and biases.

57
00:02:26.008 --> 00:02:28.001
The neural network will go through

58
00:02:28.001 --> 00:02:32.005
all the data in your training set to fine tune its results.

59
00:02:32.005 --> 00:02:34.008
Remember that the network will tune itself

60
00:02:34.008 --> 00:02:39.005
by using backpropagation to change the weights and bias

61
00:02:39.005 --> 00:02:42.003
to lower the cost function.

62
00:02:42.003 --> 00:02:45.004
In a sense, it will go backward through the network

63
00:02:45.004 --> 00:02:49.005
and twist all the dials to increase its accuracy.

64
00:02:49.005 --> 00:02:51.000
Once the artificial neural network

65
00:02:51.000 --> 00:02:52.005
has gone through the training set,

66
00:02:52.005 --> 00:02:55.001
then data will be added from the test set.

67
00:02:55.001 --> 00:02:57.000
The test set will not be labeled.

68
00:02:57.000 --> 00:03:01.003
It could be hundreds of thousands of images of anything.

69
00:03:01.003 --> 00:03:03.009
Then you'll see how well your neural network performed

70
00:03:03.009 --> 00:03:06.000
when identifying dog photos.

71
00:03:06.000 --> 00:03:07.003
Sometimes, the neural network

72
00:03:07.003 --> 00:03:09.003
will do very well with the training set,

73
00:03:09.003 --> 00:03:11.006
but not so well with the test set.

74
00:03:11.006 --> 00:03:13.004
When this happens, it usually means

75
00:03:13.004 --> 00:03:15.008
that you are overfitting the data.

76
00:03:15.008 --> 00:03:18.003
Remember, that's when the system's really good

77
00:03:18.003 --> 00:03:20.007
at identifying the smaller training set

78
00:03:20.007 --> 00:03:22.007
but doesn't have enough complexity

79
00:03:22.007 --> 00:03:26.005
to deal with the new data in the test set.

80
00:03:26.005 --> 00:03:28.000
Now, it's unlikely that your team

81
00:03:28.000 --> 00:03:31.009
will classify dog, or not dog, anytime soon.

82
00:03:31.009 --> 00:03:34.008
However, this approach to binary classification

83
00:03:34.008 --> 00:03:38.000
is a powerful way to get insights from your data.

84
00:03:38.000 --> 00:03:40.004
Think about your customer data, your sales data,

85
00:03:40.004 --> 00:03:43.002
or even data from your IOT devices

86
00:03:43.002 --> 00:03:45.008
and what you can learn from this approach.
